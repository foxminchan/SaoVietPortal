// <auto-generated/>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

#nullable disable

namespace Portal.Infrastructure.Migrations;

[DbContext(typeof(ApplicationDbContext))]
partial class ApplicationDbContextModelSnapshot : ModelSnapshot
{
    protected override void BuildModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder
            .HasAnnotation("ProductVersion", "7.0.4")
            .HasAnnotation("Relational:MaxIdentifierLength", 128);

        SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
        {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("StudentId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Portal.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("imageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AvatarUrl");

                    b.Property<string>("StudentId")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("StudentId")
                        .HasColumnType("char(10)");

                    b.HasKey("StudentId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Portal.Domain.Entities.Branch", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("char(8)")
                        .HasColumnName("StudentId");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("Address");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<string>("phone")
                        .HasColumnType("char(10)")
                        .HasColumnName("Phone");

                    b.HasKey("StudentId");

                    b.ToTable("Branch", (string)null);
                });

            modelBuilder.Entity("Portal.Domain.Entities.Class", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("char(10)")
                        .HasColumnName("StudentId");

                    b.Property<string>("StudentId")
                        .HasColumnType("char(8)");

                    b.Property<string>("StudentId")
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("endDate")
                        .HasColumnType("date")
                        .HasColumnName("EndDate");

                    b.Property<double?>("fee")
                        .HasColumnType("float")
                        .HasColumnName("Fee");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("date")
                        .HasColumnName("StartDate");

                    b.HasKey("StudentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("Class", (string)null);
                });

            modelBuilder.Entity("Portal.Domain.Entities.Course", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("StudentId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.HasKey("StudentId");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("Portal.Domain.Entities.CourseEnrollment", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("char(10)");

                    b.Property<string>("StudentId")
                        .HasColumnType("char(10)");

                    b.HasKey("StudentId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("CourseEnrollment", (string)null);
                });

            modelBuilder.Entity("Portal.Domain.Entities.CourseRegistration", b =>
                {
                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Uniqueidentifier")
                        .HasColumnName("StudentId");

                    b.Property<DateTime?>("appointmentDate")
                        .HasColumnType("date")
                        .HasColumnName("AppointmentDate");

                    b.Property<string>("StudentId")
                        .HasColumnType("char(10)");

                    b.Property<decimal>("discountAmount")
                        .HasColumnType("decimal(4,2)")
                        .HasColumnName("DiscountAmount");

                    b.Property<byte?>("StudentId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("registerDate")
                        .HasColumnType("date")
                        .HasColumnName("RegisterDate");

                    b.Property<double>("Fee")
                        .HasColumnType("float")
                        .HasColumnName("RegisterFee");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Status");

                    b.Property<string>("StudentId")
                        .HasColumnType("char(10)");

                    b.HasKey("StudentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudentId", "StudentId");

                    b.ToTable("CourseRegistration", (string)null);
                });

            modelBuilder.Entity("Portal.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<byte>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("StudentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("StudentId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("StudentId");

                    b.ToTable("PaymentMethod", (string)null);
                });

            modelBuilder.Entity("Portal.Domain.Entities.Position", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StudentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("StudentId");

                    b.ToTable("Position", (string)null);
                });

            modelBuilder.Entity("Portal.Domain.Entities.ReceiptsExpenses", b =>
                {
                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Uniqueidentifier")
                        .HasColumnName("StudentId");

                    b.Property<double>("amount")
                        .HasColumnType("float")
                        .HasColumnName("Amount");

                    b.Property<string>("StudentId")
                        .HasColumnType("char(8)");

                    b.Property<DateTime>("date")
                        .HasColumnType("date")
                        .HasColumnName("Date");

                    b.Property<string>("note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Note");

                    b.Property<bool>("type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Type");

                    b.HasKey("StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("ReceiptsExpenses", (string)null);
                });

            modelBuilder.Entity("Portal.Domain.Entities.Staff", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("StudentId");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("Address");

                    b.Property<string>("StudentId")
                        .HasColumnType("char(8)");

                    b.Property<DateTime?>("dob")
                        .HasColumnType("date")
                        .HasColumnName("Dob");

                    b.Property<DateTime?>("dsw")
                        .HasColumnType("date")
                        .HasColumnName("Dsw");

                    b.Property<string>("fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Fullname");

                    b.Property<string>("managerId")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("StudentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("managerId");

                    b.HasIndex("StudentId");

                    b.ToTable("Staff", (string)null);
                });

            modelBuilder.Entity("Portal.Domain.Entities.Student", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("char(10)")
                        .HasColumnName("StudentId");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("Address");

                    b.Property<DateTime?>("dob")
                        .HasColumnType("date")
                        .HasColumnName("Dob");

                    b.Property<string>("fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Fullname");

                    b.Property<bool>("gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Gender");

                    b.Property<string>("occupation")
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("Occupation");

                    b.Property<string>("pod")
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("Pod");

                    b.Property<string>("socialNetwork")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SocialNetwork");

                    b.HasKey("StudentId");

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("Portal.Domain.Entities.StudentProgress", b =>
                {
                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Uniqueidentifier")
                        .HasColumnName("StudentId");

                    b.Property<string>("StudentId")
                        .HasColumnType("char(10)");

                    b.Property<string>("lessonContent")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LessonContent");

                    b.Property<DateTime?>("lessonDate")
                        .HasColumnType("date")
                        .HasColumnName("LessonDate");

                    b.Property<string>("lessonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("LessonName");

                    b.Property<double>("lessonRating")
                        .HasColumnType("float")
                        .HasColumnName("LessonRating");

                    b.Property<string>("progressStatus")
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Status");

                    b.Property<string>("StudentId")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("StudentId")
                        .HasColumnType("char(10)");

                    b.HasKey("StudentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudentId", "StudentId");

                    b.ToTable("StudentProgress", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Portal.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Portal.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Portal.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Portal.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Portal.Domain.Entities.ApplicationUser", b =>
                {
                    b.HasOne("Portal.Domain.Entities.Staff", "staff")
                        .WithMany("users")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Users_Staff");

                    b.HasOne("Portal.Domain.Entities.Student", "student")
                        .WithMany("users")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Users_Students");

                    b.Navigation("staff");

                    b.Navigation("student");
                });

            modelBuilder.Entity("Portal.Domain.Entities.Class", b =>
                {
                    b.HasOne("Portal.Domain.Entities.Branch", "branch")
                        .WithMany("classes")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Class_Branch");

                    b.HasOne("Portal.Domain.Entities.Course", "course")
                        .WithMany("classes")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Class_Course");

                    b.Navigation("branch");

                    b.Navigation("course");
                });

            modelBuilder.Entity("Portal.Domain.Entities.CourseEnrollment", b =>
                {
                    b.HasOne("Portal.Domain.Entities.Class", "class")
                        .WithMany("courseEnrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_CourseEnrollment_Class");

                    b.HasOne("Portal.Domain.Entities.Student", "student")
                        .WithMany("courseEnrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CourseEnrollment_Student");

                    b.Navigation("class");

                    b.Navigation("student");
                });

            modelBuilder.Entity("Portal.Domain.Entities.CourseRegistration", b =>
                {
                    b.HasOne("Portal.Domain.Entities.PaymentMethod", "paymentMethod")
                        .WithMany("courseRegistrations")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_CourseRegistration_PaymentMethod");

                    b.HasOne("Portal.Domain.Entities.CourseEnrollment", "courseEnrollment")
                        .WithMany("courseRegistrations")
                        .HasForeignKey("StudentId", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_CourseRegistrations_CourseEnrollment");

                    b.Navigation("courseEnrollment");

                    b.Navigation("paymentMethod");
                });

            modelBuilder.Entity("Portal.Domain.Entities.ReceiptsExpenses", b =>
                {
                    b.HasOne("Portal.Domain.Entities.Branch", "branch")
                        .WithMany("receiptsExpenses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ReceiptsExpenses_Branch");

                    b.Navigation("branch");
                });

            modelBuilder.Entity("Portal.Domain.Entities.Staff", b =>
                {
                    b.HasOne("Portal.Domain.Entities.Branch", "branch")
                        .WithMany("staffs")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Staff_Branch");

                    b.HasOne("Portal.Domain.Entities.Staff", "manager")
                        .WithMany("staffs")
                        .HasForeignKey("managerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Staff_Manager");

                    b.HasOne("Portal.Domain.Entities.Position", "position")
                        .WithMany("staffs")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Staff_Position");

                    b.Navigation("branch");

                    b.Navigation("manager");

                    b.Navigation("position");
                });

            modelBuilder.Entity("Portal.Domain.Entities.StudentProgress", b =>
                {
                    b.HasOne("Portal.Domain.Entities.Staff", "staff")
                        .WithMany("studentProgresses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_StudentProgress_Staff");

                    b.HasOne("Portal.Domain.Entities.CourseEnrollment", "courseEnrollment")
                        .WithMany("studentProgresses")
                        .HasForeignKey("StudentId", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_StudentProgress_CourseEnrollment");

                    b.Navigation("courseEnrollment");

                    b.Navigation("staff");
                });

            modelBuilder.Entity("Portal.Domain.Entities.Branch", b =>
                {
                    b.Navigation("classes");

                    b.Navigation("receiptsExpenses");

                    b.Navigation("staffs");
                });

            modelBuilder.Entity("Portal.Domain.Entities.Class", b =>
                {
                    b.Navigation("courseEnrollments");
                });

            modelBuilder.Entity("Portal.Domain.Entities.Course", b =>
                {
                    b.Navigation("classes");
                });

            modelBuilder.Entity("Portal.Domain.Entities.CourseEnrollment", b =>
                {
                    b.Navigation("courseRegistrations");
                    b.Navigation("studentProgresses");
                });

            modelBuilder.Entity("Portal.Domain.Entities.PaymentMethod", b =>
                {
                    b.Navigation("courseRegistrations");
                });

            modelBuilder.Entity("Portal.Domain.Entities.Position", b =>
                {
                    b.Navigation("staffs");
                });

            modelBuilder.Entity("Portal.Domain.Entities.Staff", b =>
                {
                    b.Navigation("staffs");

                    b.Navigation("studentProgresses");

                    b.Navigation("users");
                });

            modelBuilder.Entity("Portal.Domain.Entities.Student", b =>
                {
                    b.Navigation("courseEnrollments");

                    b.Navigation("users");
                });
#pragma warning restore 612, 618
        }
}

